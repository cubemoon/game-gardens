<?xml version="1.0" standalone="yes"?>
<!-- build configuration -->
<project name="toybox" default="compile" basedir="." xmlns:artifact="urn:maven-artifact-ant">
  <property name="deploy.dir"  value="dist"/>
  <property name="src.dir"     value="src/main/java"/>
  <property name="tsrc.dir"    value="src/test/java"/>
  <property name="asrc.dir"    value="src/main/as"/>
  <property name="classes.dir"  value="${deploy.dir}/classes"/>
  <property name="tclasses.dir" value="${deploy.dir}/test-classes"/>

  <property name="maven-ant.vers" value="2.1.1"/>
  <property name="maven-ant.dir" value="${user.home}/.m2/ant-support"/>
  <property name="maven-ant.jar" value="${maven-ant.dir}/maven-ant-tasks-${maven-ant.vers}.jar"/>
  <property name="maven-ant.url"
            value="http://mirrors.ibiblio.org/pub/mirrors/apache/maven/binaries"/>
  <condition property="maven-ant.exists"><available file="${maven-ant.jar}"/></condition>
  <target name="-download-maven-ant" unless="maven-ant.exists">
    <mkdir dir="${maven-ant.dir}"/>
    <get src="${maven-ant.url}/maven-ant-tasks-${maven-ant.vers}.jar"
         dest="${maven-ant.jar}" usetimestamp="true"/>
  </target>

  <target name="-init-maven-ant" depends="-download-maven-ant">
    <taskdef resource="org/apache/maven/artifact/ant/antlib.xml"
             uri="urn:maven-artifact-ant" classpath="${maven-ant.jar}"/>
    <artifact:pom id="pom" file="pom.xml"/>
    <artifact:dependencies pathId="compile.classpath" pomRefId="pom" useScope="compile"/>
    <artifact:dependencies pathId="testlibs.classpath" pomRefId="pom" useScope="test"/>
  </target>

  <target name="-check-ooo">
    <available property="threerings.present" classname="com.threerings.user.OOOUser"
               classpathref="compile.classpath"/>
  </target>

  <target name="-prepare" depends="-init-maven-ant">
    <mkdir dir="${deploy.dir}"/>
    <path id="built.classpath">
      <path refid="compile.classpath"/>
      <pathelement location="${classes.dir}"/>
    </path>
    <path id="test.classpath">
      <path refid="testlibs.classpath"/>
      <pathelement location="${classes.dir}"/>
      <pathelement location="${tclasses.dir}"/>
    </path>
  </target>

  <target name="-preptools" depends="-prepare">
    <artifact:dependencies pathId="tools.classpath">
      <dependency groupId="com.threerings" artifactId="narya-tools" version="1.2"/>
    </artifact:dependencies>
    <taskdef resource="com/threerings/presents/tools.properties" classpathref="tools.classpath"/>
  </target>

  <target name="clean" description="Cleans out build results">
    <delete dir="${deploy.dir}/classes"/>
    <delete dir="${deploy.dir}/docs"/>
    <delete failonerror="false"><fileset dir="${deploy.dir}" includes="*.jar"/></delete>
    <delete failonerror="false"><fileset dir="${deploy.dir}" includes="*.swc"/></delete>
  </target>

  <target name="distclean" description="Scorched earth clean">
    <delete dir="${deploy.dir}"/>
  </target>

  <target name="compile" depends="-prepare,-check-ooo" description="Builds the Java code.">
    <mkdir dir="${classes.dir}"/>
    <copy todir="${classes.dir}"><fileset dir="src/main/resources" includes="**"/></copy>
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on" source="1.5" target="1.5">
      <classpath refid="compile.classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
      <compilerarg value="-Xlint:-unchecked"/> <!-- TODO: fix -->
      <exclude name="com/threerings/toybox/server/ooo/**" unless="threerings.present"/>
    </javac>

<!-- uncomment if we ever have test code
    <mkdir dir="${tclasses.dir}"/>
    <copy todir="${tclasses.dir}"><fileset dir="src/test/resources" includes="**"/></copy>
    <javac srcdir="${tsrc.dir}" destdir="${tclasses.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" source="1.5" target="1.5"
           encoding="utf-8" classpathref="test.classpath">
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
-->
  </target>

  <target name="-checkaslib">
    <condition property="no_build_aslib">
      <not><available file="${flexsdk.dir}/lib/compc.jar"/></not>
    </condition>
    <condition property="no_rebuild_aslib"><or>
      <isset property="no_build_aslib"/>
      <uptodate targetfile="${deploy.dir}/${ant.project.name}lib.swc">
        <srcfiles dir="${asrc.dir}" includes="**/*.as"/>
      </uptodate>
    </or></condition>
  </target>
  <target name="-noteaslib" if="no_build_aslib"><echo>
    NOTE: not building ActionScript library. Pass -Dflexsdk.dir=DIR to
    activate ActionScript library build.
  </echo></target>

  <target name="aslib" unless="no_rebuild_aslib" depends="-checkaslib,-noteaslib"
          description="Builds the ActionScript code">
    <!-- obtain our ActionScript dependencies via Maven -->
    <artifact:pom id="as-pom" file="as-pom.xml"/>
    <artifact:dependencies filesetId="aslibs.fileset" pomRefId="as-pom" useScope="compile"/>
    <copy todir="${deploy.dir}/lib">
      <fileset dir="lib" includes="as3isolib-*.swc"/>
      <fileset refid="aslibs.fileset"/>
      <mapper type="flatten"/>
    </copy>

    <copy file="etc/aslib-config.xml.in" tofile="${deploy.dir}/aslib-config.xml">
      <filterset>
        <filter token="flex_sdk_dir" value="${flexsdk.dir}"/>
        <filter token="lib_name" value="${ant.project.name}"/>
      </filterset>
    </copy>
    <java jar="${flexsdk.dir}/lib/compc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="${deploy.dir}/aslib-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=${asrc.dir}/"/>
      <arg value="-include-sources=${asrc.dir}/"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/${ant.project.name}lib.swc"/>
    </java>
    <delete file="${deploy.dir}/aslib-config.xml"/>
  </target>

  <target name="javadoc" depends="-prepare" description="Builds the Java documentation">
    <mkdir dir="${deploy.dir}/docs"/>
    <javadoc sourcepath="${src.dir}" packagenames="com.threerings.*"
             destdir="${deploy.dir}/docs" additionalparam="-breakiterator">
      <classpath refid="compile.classpath"/>
      <link href="http://java.sun.com/j2se/1.5/docs/api/"/>
      <link href="http://samskivert.googlecode.com/svn/apidocs/"/>
      <link href="http://depot.googlecode.com/svn/apidocs/"/>
      <link href="http://www.threerings.net/code/narya/docs/api"/>
      <link href="http://www.threerings.net/code/vilya/docs/api"/>
      <link href="http://www.threerings.net/code/nenya/docs/api"/>
    </javadoc>
    <copy todir="${deploy.dir}/docs">
      <fileset dir="${src.dir}" includes="**/*.png"/>
    </copy>
  </target>

  <target name="asdoc" unless="no_build_aslib" depends="-checkaslib"
          description="Builds the ActionScript documention">
    <mkdir dir="${deploy.dir}/asdocs"/>
    <java classpath="${flexsdk.dir}/lib/asdoc.jar" classname="flex2.tools.ASDoc" fork="true">
      <jvmarg value="-Xmx1024m"/>
      <jvmarg value="-Dsun.io.useCanonCashes=false"/>
      <jvmarg value="-Xbootclasspath/p:${flexsdk.dir}/asdoc/lib/xalan.jar"/>
      <arg value="+flexlib=${flexsdk.dir}/frameworks"/>
      <arg line="-library-path ${flexsdk.dir}/frameworks/libs"/>
      <arg line="-library-path ${deploy.dir}/lib/naryalib-0.0-SNAPSHOT.swc"/>
      <arg line="-library-path ${deploy.dir}/lib/nenyalib-0.0-SNAPSHOT.swc"/>
      <arg line="-templates-path ${flexsdk.dir}/asdoc/templates"/>
      <arg line="-doc-sources ${asrc.dir}"/>
      <arg line="-output ${deploy.dir}/asdocs"/>
    </java>
  </target>

  <property name="test" value=""/>
  <target name="tests" depends="compile"
          description="Runs unit tests. Use -Dtest=Foo to run only FooTest.">
<!-- uncomment if we ever have test code
    <taskdef name="unit" classpathref="test.classpath"
      classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
    <mkdir dir="${deploy.dir}/test-reports"/>
    <unit printsummary="off" haltonfailure="yes">
      <classpath refid="test.classpath"/>
      <sysproperty key="test_dir" value="${tclasses.dir}"/>
      <formatter type="brief" usefile="false"/>
      <formatter type="xml"/>
      <batchtest todir="${deploy.dir}/test-reports">
        <fileset dir="${tsrc.dir}" includes="**/*${test}*Test.java"/>
      </batchtest>
    </unit>
-->
  </target>

  <target name="dist" depends="compile,aslib" description="Builds jar files.">
    <jar destfile="${deploy.dir}/${ant.project.name}.jar" basedir="${classes.dir}"/>
  </target>

  <target name="genrecord" depends="-prepare"
          description="Generates fields for persistent record classes.">
    <taskdef name="grecord" classname="com.samskivert.depot.tools.GenRecordTask"
             classpathref="compile.classpath"/>
    <!-- make sure the record class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="compile.classpath"/>
      <include name="**/*Record.java"/>
    </javac>
    <!-- now update the source files -->
    <grecord classpathref="built.classpath">
      <fileset dir="${src.dir}" includes="**/*Record.java"/>
    </grecord>
  </target>

  <target name="gendobj" depends="-preptools"
          description="Generates additional methods for distributed object classes">
    <!-- make sure the dobject class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on"
           source="1.5" target="1.5" classpathref="compile.classpath">
      <include name="**/*Object.java"/>
    </javac>
    <!-- now generate the associated files -->
    <gendobj classpathref="built.classpath">
      <fileset dir="${src.dir}" includes="**/*Object.java"/>
    </gendobj>
  </target>

  <target name="genservice" depends="-preptools"
          description="Generates marshaller and dispatcher classes for all invocation services">
    <!-- make sure the service class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on"
           source="1.5" target="1.5">
      <classpath refid="compile.classpath"/>
      <include name="**/*Service.java"/>
    </javac>
    <genservice header="lib/SOURCE_HEADER" asroot="${asrc.dir}" classpathref="built.classpath">
      <fileset dir="${src.dir}">
        <include name="**/client/*Service.java"/>
      </fileset>
    </genservice>
  </target>

  <target name="genascript" depends="-preptools"
          description="Generates ActionScript versions of our Streamable classes">
    <!-- now generate the associated files -->
    <genascript header="lib/SOURCE_HEADER" asroot="${asrc.dir}">
      <fileset dir="${src.dir}">
        <include name="**/data/*.java"/>
      </fileset>
    </genascript>
  </target>

  <property name="maven.deploy.repo" value="file://${user.home}/.m2/repository"/>
  <target name="maven-deploy" depends="dist,tests,-maven-as-deploy"
          description="Deploys our build artifacts to a Maven repository.">
    <artifact:deploy file="${deploy.dir}/${ant.project.name}.jar" uniqueVersion="false">
      <remoteRepository url="${maven.deploy.repo}"/>
      <pom refid="pom"/>
    </artifact:deploy>
  </target>
  <target name="-maven-as-deploy" unless="no_build_aslib">
    <artifact:pom id="as-pom" file="as-pom.xml"/>
    <artifact:deploy file="${deploy.dir}/${ant.project.name}lib.swc" uniqueVersion="false">
      <remoteRepository url="${maven.deploy.repo}"/>
      <pom refid="as-pom"/>
    </artifact:deploy>
  </target>
</project>
