<?xml version="1.0" standalone="yes"?>
<!-- build configuration -->
<project name="toybox" default="compile" basedir=".">

  <!-- configuration parameters -->
  <property name="lib.name"    value="toybox"/>
  <property name="deploy.dir"  value="dist"/>
  <property name="savedoc.dir" value="docs"/>

  <!-- derived properties -->  
  <property name="javadoc.home" value="${deploy.dir}/docs"/>
  <property name="classes.dir"  value="${deploy.dir}/classes"/>

  <!-- import some targets to enumerate library dependencies -->
  <property name="libs.dir" value="lib"/>
  <import file="etc/libs-incl.xml"/>

  <!-- declare our classpath -->
  <path id="classpath">
    <pathelement location="${classes.dir}"/>
    <fileset dir="${deploy.dir}/lib" includes="*.jar"/>
  </path>

  <!-- checks to see which packages are available -->
  <target name="check-available">
    <available property="threerings.present"
     classname="com.threerings.user.OOOUser" classpathref="classpath"/>
  </target>

  <!-- generates additional methods for distributed object classes -->
  <target name="gendobj" depends="prepare">
    <!-- make sure the dobject class files are all compiled -->
    <javac srcdir="src/java" destdir="${deploy.dir}/classes"
           debug="on" optimize="${build.optimize}" deprecation="on"
           source="1.5" target="1.5">
      <classpath refid="classpath"/>
      <include name="**/*Object.java"/>
    </javac>
    <!-- now generate the associated files -->
    <gendobj classpathref="classpath">
      <fileset dir="src/java" includes="**/*Object.java"/>
    </gendobj>
  </target>

  <!-- generates marshaller and dispatcher classes for all invocation -->
  <!-- service declarations -->
  <target name="genservice" depends="prepare">
    <!-- make sure the service class files are all compiled -->
    <javac srcdir="src/java" destdir="${classes.dir}"
           debug="on" optimize="${build.optimize}" deprecation="on"
           source="1.5" target="1.5">
      <classpath refid="classpath"/>
      <include name="**/*Service.java"/>
    </javac>
    <!-- now generate the associated files -->
    <genservice header="lib/SOURCE_HEADER" asroot="src/as"
             classpathref="classpath">
      <fileset dir="src/java" includes="**/*Service.java"/>
    </genservice>
  </target>

  <!-- prepares the application directories -->
  <target name="prepare">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/lib"/>
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${classes.dir}/rsrc"/>
    <mkdir dir="${javadoc.home}"/>
    <copy todir="${classes.dir}">
      <fileset dir="src/java" includes="**/*.properties"/>
    </copy>
    <copy todir="${classes.dir}/rsrc">
      <fileset dir="rsrc" includes="**/*" excludes="**/bundles/**"/>
    </copy>
    <copy todir="${deploy.dir}/lib" flatten="true">
      <fileset refid="${lib.name}.libs"/>
    </copy>
    <!-- defines our various presents ant tasks -->
    <taskdef resource="com/threerings/presents/tools.properties"
             classpath="${libs.dir}/narya-tools-full.jar"/>
  </target>

  <!-- cleans out the intermediate build files -->
  <target name="clean">
    <delete dir="${deploy.dir}/classes"/>
    <delete dir="${deploy.dir}/docs"/>
    <delete failonerror="false"><fileset dir="${deploy.dir}" includes="*.jar"/></delete>
  </target>

  <!-- wipes the entire build directory clean -->
  <target name="distclean">
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- build the java class files -->
  <target name="compile" depends="prepare,check-available">
    <javac srcdir="src/java" destdir="${classes.dir}" debug="on" optimize="{$build.optimize}"
           deprecation="on" includeAntRuntime="no" source="1.5" target="1.5">
      <classpath refid="classpath"/>
      <exclude name="com/threerings/toybox/server/ooo/**"
               unless="threerings.present"/>
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <!-- checks whether our Flash library needs building -->
  <target name="checkaslib">
    <condition property="no_build_aslib"><or>
      <not><available file="${flexsdk.dir}/lib/compc.jar"/></not>
      <uptodate targetfile="${deploy.dir}/${lib.name}lib.swc">
        <srcfiles dir="src/as" includes="**/*.as"/>
      </uptodate>
    </or></condition>
  </target>

  <!-- builds our Flash library -->
  <target name="aslib" unless="no_build_aslib" depends="checkaslib">
    <copy file="etc/aslib-config.xml.in" tofile="${deploy.dir}/aslib-config.xml">
      <filterset>
        <filter token="flex_sdk_dir" value="${flexsdk.dir}"/>
        <filter token="lib_name" value="${lib.name}"/>
      </filterset>
    </copy>
    <java jar="${flexsdk.dir}/lib/compc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="${deploy.dir}/aslib-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=src/as/"/>
      <arg value="-include-sources=src/as/"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/${lib.name}lib.swc"/>
    </java>
    <delete file="${deploy.dir}/aslib-config.xml"/>
  </target>

  <!-- build the javadoc documentation -->
  <target name="javadoc" depends="prepare">
    <javadoc sourcepath="src/java"
             packagenames="com.threerings.*"
             destdir="${javadoc.home}"
             additionalparam="-breakiterator">
      <classpath refid="classpath"/>
      <link href="http://java.sun.com/j2se/1.4/docs/api/"/>
      <link href="http://samskivert.com/code/samskivert/samskivert/docs/api/"/>
    </javadoc>
    <copy todir="${javadoc.home}">
      <fileset dir="src/java" includes="**/*.png"/>
    </copy>
  </target>

  <!-- builds the javadocs and stuffs them in a directory where they -->
  <!-- won't be blown away when we do "clean" next time -->
  <target name="savedoc" depends="javadoc">
    <delete dir="${savedoc.dir}/api"/>
    <copy todir="${savedoc.dir}/api">
      <fileset dir="${javadoc.home}" includes="**/*"/>
    </copy>
  </target>

  <!-- a target for rebuilding everything -->
  <target name="all" depends="clean,prepare,compile,javadoc,dist"/>

  <!-- builds our distribution files (war and jar) -->
  <target name="dist" depends="prepare,compile,aslib">
    <jar destfile="${deploy.dir}/${lib.name}.jar"
         basedir="${deploy.dir}/classes"/>
  </target>
</project>
